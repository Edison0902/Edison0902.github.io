<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【计算机基础知识】计算机网络</title>
    <link href="/2025/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/README/"/>
    <url>/2025/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/README/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><blockquote><ul><li><a href="#OSI%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%8F%8ATCPIP%E5%9B%9B%E5%B1%82%E5%8D%8F%E8%AE%AE">OSI七层协议及TCP&#x2F;IP四层协议</a></li><li><a href="#%E9%80%9A%E4%BF%A1%E4%BA%A4%E4%BA%92%E6%96%B9%E5%BC%8F">通信交互方式</a></li><li><a href="#MAC%E5%9C%B0%E5%9D%80%E5%92%8CIP%E5%9C%B0%E5%9D%80">MAC地址和IP地址</a></li><li><a href="#ARP%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BD%9C%E7%94%A8">ARP协议的作用</a></li><li><a href="#ping%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88">ping发生了什么</a></li><li><a href="#traceroute%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88">traceroute发生了什么</a></li><li><a href="#TCPUDP%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">TCP&#x2F;UDP的区别和应用场景</a></li><li><a href="#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%92%8C%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%9A%84%E5%8C%BA%E5%88%AB">拥塞控制和流量控制的区别</a></li><li><a href="#TCP%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">TCP滑动窗口实现流量控制</a></li><li><a href="#TCP%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0">TCP超时重传</a></li><li><a href="#TCP%E6%8B%A5%E5%A1%9E%E6%9C%BA%E5%88%B6">TCP拥塞机制</a></li><li><a href="#TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%8F%8A%E4%B8%89%E6%AC%A1%E7%BC%98%E7%94%B1">TCP三次握手及三次缘由</a></li><li><a href="#TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%8F%8A%E5%9B%9B%E6%AC%A1%E7%BC%98%E7%94%B1">TCP四次挥手及四次缘由</a></li><li><a href="#TIME-WAIT%E7%8A%B6%E6%80%81%E5%8F%8A2MSL%E6%97%B6%E9%97%B4">TIME-WAIT状态及2MSL时间</a></li><li><a href="#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9FDNS">域名系统DNS</a></li><li><a href="#%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6URL">统一资源定位符URL</a></li><li><a href="#%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8BHTTP%E5%8D%8F%E8%AE%AE">描述一下HTTP协议</a></li><li><a href="#HTTP2">HTTP2.0</a></li><li><a href="#HTTP%E6%8C%81%E4%B9%85%E8%BF%9E%E6%8E%A5%E4%B8%8E%E7%AE%A1%E7%BA%BF%E5%8C%96">HTTP持久连接与管线化</a></li><li><a href="#HTTP%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%85%B7%E4%BD%93%E4%BF%A1%E6%81%AF">HTTP协议请求报文具体信息</a></li><li><a href="#GET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB">GET和POST的区别</a></li><li><a href="#HTTP%E5%8D%8F%E8%AE%AE%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E5%85%B7%E4%BD%93%E4%BF%A1%E6%81%AF">HTTP协议响应报文具体信息</a></li><li><a href="#HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP状态码</a></li><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E9%94%AE%E5%85%A5URL%E5%90%8E%E7%9A%84%E8%AE%BF%E9%97%AE%E6%B5%81%E7%A8%8B">浏览器键入URL后的访问流程</a></li><li><a href="#IPTCPUDP%E5%88%86%E7%89%87">IP&#x2F;TCP&#x2F;UDP分片</a></li><li><a href="#%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%92%8C%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6">对称密钥和公钥密码体制</a></li><li><a href="#%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E5%92%8C%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6">数字签名和数字证书</a></li><li><a href="#HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB">HTTP和HTTPS的区别</a></li><li><a href="#%E8%BF%90%E8%BE%93%E5%B1%82%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E5%8F%8ASSL%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B">运输层安全协议及SSL工作过程</a></li><li><a href="#HTTPS%E5%BF%85%E9%A1%BB%E5%9C%A8%E6%AF%8F%E6%AC%A1%E8%AF%B7%E6%B1%82%E4%B8%AD%E9%83%BD%E8%A6%81%E5%85%88%E5%9C%A8SSL/TLS%E5%B1%82%E8%BF%9B%E8%A1%8C%E6%8F%A1%E6%89%8B%E4%BC%A0%E8%BE%93%E5%AF%86%E9%92%A5%E5%90%97">HTTPS必须在每次请求中都要先在SSL&#x2F;TLS层进行握手传输密钥吗？</a></li><li><a href="#cookie%E5%92%8Csession">cookie和session</a></li><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%AD%E5%90%8Esession%E5%B0%B1%E9%94%80%E6%AF%81%E4%BA%86%E5%90%97">浏览器关闭后，session就销毁了吗</a></li></ul></blockquote><h2 id="OSI七层协议及TCP-IP四层协议"><a href="#OSI七层协议及TCP-IP四层协议" class="headerlink" title="OSI七层协议及TCP&#x2F;IP四层协议"></a>OSI七层协议及TCP&#x2F;IP四层协议</h2><ul><li><p>七层协议：物、数、网、传、会、表、应</p><ul><li>物理层  RJ45     </li><li>数据链路层  PPP，IEEE 802.3&#x2F;802.2</li><li>网络层 IP，ARP </li><li>传输层 TCP，UDP</li><li>会话层   </li><li>表示层 TIFF，GIF，JPEG, </li><li>应用层 DNS，HTTP，FTP</li></ul></li><li><p>四层协议：数据链路层（物理层，数据链路层），网络层（网络层），传输层（传输层），应用层（会话层，表示层，应用层）</p><ul><li>数据链路层： PPP<strong>MAC不属于协议，只是一个地址</strong></li><li>网络层：IP、ARP、ICMP</li><li>传输层：TCP、UDP</li><li>应用层：DNS、HTTP、FTP</li></ul></li></ul><h2 id="通信交互方式"><a href="#通信交互方式" class="headerlink" title="通信交互方式"></a>通信交互方式</h2><ul><li>单工通信<ul><li>只能有一个方向的通信没有反方向的交互</li></ul></li><li>半双工通信<ul><li>双方可以发送消息，但不能同时发送。可以交替进行一方发送、另一方接收</li></ul></li><li>全双工通信<ul><li>通信的双方可以同时发送和接收信息</li></ul></li></ul><h2 id="MAC地址和IP地址"><a href="#MAC地址和IP地址" class="headerlink" title="MAC地址和IP地址"></a>MAC地址和IP地址</h2><ul><li>MAC地址又叫硬件地址或物理地址，它不是地址位置，实际上是适配器地址，每一台计算机中固化在适配器的ROM中的地址，作用是用来定义网络设备的位置</li><li>IP地址是IP协议提供的一种统一的地址格式，为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异</li><li>两者的区别<ul><li>物理地址是数据链路层和物理层使用的地址，放在MAC帧的首部</li><li>IP地址是网络层和以上各层使用的地址，放在IP数据报的首部</li></ul></li></ul><h2 id="ARP协议的作用"><a href="#ARP协议的作用" class="headerlink" title="ARP协议的作用"></a>ARP协议的作用</h2><p>网络层使用的是IP地址，数据链路层使用的是硬件地址。<br>ARP协议的用途是为了从网络层使用的IP地址，解析出数据链路层使用的硬件地址。</p><ul><li>在主机ARP高速缓存中存放一个从IP地址到硬件地址的映射表</li><li>当需要解析时，先去arp缓存表(存着ip-mac对应关系)去查找目标ip的mac地址</li><li>如果查到了，将目标ip的mac地址封装到链路层数据报</li><li>如果缓存中没有找到，会发起一个广播：who is ip XXX tell ip XXX，所有收到的广播的机器看这个ip是不是自己的，如果是自己的，则以单播的形式将自己的mac地址回复给请求的机器</li></ul><h2 id="ping发生了什么"><a href="#ping发生了什么" class="headerlink" title="ping发生了什么"></a><a href="https://blog.csdn.net/fd8559350/article/details/52135571">ping发生了什么</a></h2><p>ping主要是为了测试两台主机之间的连通性，通过应用层直接使用网络层ICMP，没有通过运输层TCP和UDP，是通过发送ICMP报文回显请求实现。</p><blockquote><ul><li>A主机构建一个ICMP格式的数据包，通过ICMP协议把该数据包和B主机的IP地址一起交给IP协议；</li><li>IP层构建一个数据包（A主机的IP地址+控制信息+B主机的IP地址），获得B主机的MAC地址，以便构建一个数据帧(IP协议会根据B主机的IP地址和自己的子网掩码判断是不是属于同一层网络,如果是属于同一层网络的话,就会获得B主机的MAC地址，如果以前两机有过通信，在A机的ARP缓存表应该有B机IP与其MAC的映射关系，如果没有，就发一个ARP请求广播，得到B机的MAC)</li><li>主机B接受到主机A的发过来的数据帧以后，先检查该帧中包含的B的IP地址，并和本地的物理地址进行比对，如果符合的话，就接受，否则，就抛弃。同样，需要将该数据帧交由自己的IP层协议，IP层检查以后，再交由ICMP协议，构建一个ICMP的应答包，发送给主机A。</li></ul></blockquote><h2 id="traceroute发生了什么"><a href="#traceroute发生了什么" class="headerlink" title="traceroute发生了什么"></a>traceroute发生了什么</h2><p>traceroute用来跟踪一个分组从源点到终点的路径，及到达其中每一个路由器的往返时间</p><ul><li>通过发送UDP报文，设置目的端口为一个不可能的值</li><li>将IP首部中的TTL分别设置从1到N，每次逐个增加</li><li>每次设置TTL后，重新发送数据报，路由器接收到数据报后，将TTL减1，若当前的路由器接收到数据报，发现TTL为1时，会将TTL减1变为0，然后丢弃数据报，发送ICMP时间超过报文</li><li>如果最后一个数据报刚刚达到主机，数据报的TTL是1，此时主机不把TTL减1</li><li>因IP数据报中封装的是无法交付的UDP数据报，此时目的主机向源主机发送ICMP终点不可达差错报文，表示达到目的主机</li></ul><h2 id="TCP-UDP的区别和应用场景"><a href="#TCP-UDP的区别和应用场景" class="headerlink" title="TCP&#x2F;UDP的区别和应用场景"></a>TCP&#x2F;UDP的区别和应用场景</h2><p>###区别<br>TCP，全称：传输控制协议，面向连接的安全的流式传输协议<br>UDP，全称：用户数据报协议，面向无连接的不安全的报式传输协议</p><ul><li><p>连接</p><ul><li>TCP是面向连接的传输层协议，即传输数据之前必须先建立好连接。</li><li>UDP无连接。</li></ul></li><li><p>服务对象</p><ul><li>TCP是点对点的两点间服务，即一条TCP连接只能有两个端点</li><li>UDP支持一对一，一对多，多对一，多对多的交互通信。</li></ul></li><li><p>可靠性</p><ul><li>TCP是可靠交付：无差错，不丢失，不重复，按序到达。</li><li>UDP是尽最大努力交付，不保证可靠交付。</li></ul></li><li><p>拥塞控制，流量控制</p><ul><li>TCP有拥塞控制和流量控制保证数据传输的安全性。</li><li>UDP没有拥塞控制，网络拥塞不会影响源主机的发送效率。</li></ul></li><li><p>报文长度</p><ul><li>TCP是动态报文长度，即TCP报文长度是根据接收方的窗口大小和当前网络拥塞情况决定的，流式传输</li><li>UDP面向报文，不合并，不拆分，保留上面（应用层）传下来报文的边界，直接传输报文。</li></ul></li><li><p>首部开销</p><ul><li>TCP首部开销大，首部20个字节。</li><li>UDP首部开销小，8字节。（源端口，目的端口，UDP数据报长度，检验和，每个字段两个字节）</li></ul></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>要求通信数据完整性，则应该选用TCP协议（如文件传输、重要状态的更新，登录数据传输等）</li><li>要求通信实时性，使用 UDP 协议（如视频传输，通话，屏幕共享软件）</li></ul><h2 id="拥塞控制和流量控制的区别"><a href="#拥塞控制和流量控制的区别" class="headerlink" title="拥塞控制和流量控制的区别"></a>拥塞控制和流量控制的区别</h2><ul><li>拥塞控制是防止过多的数据注入到网络中，可以使网络中的路由器或链路不致过载，是一个全局性的过程。 </li><li>流量控制是点对点通信量的控制，是一个端到端的问题，主要就是抑制发送端发送数据的速率，以便接收端来得及接收</li></ul><h2 id="TCP滑动窗口实现流量控制"><a href="#TCP滑动窗口实现流量控制" class="headerlink" title="TCP滑动窗口实现流量控制"></a><a href="https://blog.csdn.net/dangzhangjing97/article/details/81008836">TCP滑动窗口实现流量控制</a></h2><ul><li>流量控制是让发送方的发送速率不要太快，要让接收方来得及接收，实现对发送方的流量控制.</li><li>滑动窗口出现的原因：在确认应答策略中，对每一个发送的数据段，都要给一个ACK确认应答，收到ACK后再发送下一个数据段，这样做有一个比较大的缺点，就是性能比较差，尤其是数据往返的时间长的时候</li><li>滑动窗口以字节为单位，而不是报文</li></ul><h2 id="TCP超时重传"><a href="#TCP超时重传" class="headerlink" title="TCP超时重传"></a>TCP超时重传</h2><ul><li>保证了数据的可靠传输，对于一些出错，丢包等问题TCP设计了超时与重传机制。</li><li>基本原理：在发送一个数据之后，就开启一个定时器，并设置RTO，若是在这个时间内没有收到发送数据的ACK确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。 </li><li>不同的网络情况不一样，不可能设置一样的RTO（超时重传时间），实际中RTO是根据网络中的RTT（报文段往返时间）来自适应调整的</li></ul><h2 id="TCP拥塞机制"><a href="#TCP拥塞机制" class="headerlink" title="TCP拥塞机制"></a><a href="https://blog.csdn.net/shuxnhs/article/details/80644531">TCP拥塞机制</a></h2><ul><li>拥塞的标志<ul><li>超时重传</li><li>3次重复的ACK</li></ul></li></ul><p>慢启动，拥塞避免，快恢复，快重传</p><h2 id="ACK-SYN-FIN解释及是否消耗序列号"><a href="#ACK-SYN-FIN解释及是否消耗序列号" class="headerlink" title="ACK SYN FIN解释及是否消耗序列号"></a>ACK SYN FIN解释及是否消耗序列号</h2><ul><li>ACK 确认标志位，ACK可以携带数据，若不携带，则不消耗序列号</li><li>SYN 同步标志位，SYN不能携带数据，必须消耗一个序列号</li><li>FIN 终止标志位，FIN可以携带数据，必须消耗一个序列号</li></ul><h2 id="TCP三次握手及三次缘由"><a href="#TCP三次握手及三次缘由" class="headerlink" title="TCP三次握手及三次缘由"></a>TCP三次握手及三次缘由</h2><ul><li><strong>为什么TCP三次握手，不能两次或者四次吗？</strong><ul><li>三次握手是为了防止，客户端的请求报文在网络滞留，客户端超时重传了请求报文，服务端建立连接，传输数据，释放连接之后，服务器又收到了客户端滞留的请求报文，建立连接一直等待客户端发送数据。</li><li>服务器对客户端的请求进行回应(第二次握手)后，就会理所当然的认为连接已建立，而如果客户端并没有收到服务器的回应呢？此时，客户端仍认为连接未建立，服务器会对已建立的连接保存必要的资源，如果大量的这种情况，服务器会崩溃。 </li><li>服务器端给客户端发送同步及确认报文时可以合并，四次会浪费时间</li></ul></li></ul><h2 id="TCP四次挥手及四次缘由"><a href="#TCP四次挥手及四次缘由" class="headerlink" title="TCP四次挥手及四次缘由"></a>TCP四次挥手及四次缘由</h2><p>四次报文中服务器端发送给客户端的请求关闭连接报文FIN和ACK也是合并的，相对于三次来说，只是前面多了一次ACK的确认。</p><ul><li><strong>为什么TCP四次挥手，不能三次吗？</strong><ul><li>当客户端确认发送完数据且知道服务器已经接收完了，想要关闭发送数据口（当然确认信号还是可以发），就会发FIN给服务器。</li><li>服务器收到客户端发送的FIN，表示收到了，就会发送ACK回复。</li><li>但这时候服务器可能还在发送数据，没有想要关闭数据口的意思，所以服务器的FIN与ACK不是同时发送的，而是等到服务器数据发送完了，才会发送FIN给客户端。</li><li>客户端收到服务器发来的FIN，知道服务器的数据也发送完了，回复ACK， 客户端等待2MSL以后，没有收到服务器传来的任何消息，知道服务器已经收到自己的ACK了，客户端就关闭链接，服务器也关闭链接（服务器比客户端早关闭）。</li></ul></li></ul><h2 id="TIME-WAIT状态及2MSL时间"><a href="#TIME-WAIT状态及2MSL时间" class="headerlink" title="TIME-WAIT状态及2MSL时间"></a>TIME-WAIT状态及2MSL时间</h2><ul><li>四次挥手期间，客户端和服务器端都可主动释放连接，谁主动释放，谁将进入TIME_WAIT状态</li><li>MSL是最长报文寿命，一般为2分钟，2MSL即4分钟</li><li>为什么TIME-WAIT状态必须等待2MSL时间？<ul><li>**保证最后一次挥手报文能到B，能进行超时重传。**若B收不到A的ACK报文，则B会超时重传FIN+ACK，A会在2MSL时间内收到重传报文段，然后发送ACK，重新启动2MSL计时器</li><li>2MSL后，本次连接的所有报文都会消失，不会影响下一次连接。</li></ul></li></ul><h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><p>用于将域名转换为IP地址。<br>DNS解析过程有两种，分别是递归查询和迭代查询。</p><ul><li>递归查询<ul><li>若主机询问的本地域名服务器不知道被查询域名的IP地址，本地域名服务器以DNS客户身份，向其他根域名服务器继续发出查询请求报文（代替该主机继续查询），而不是该主机自己进行下一步查询</li></ul></li><li>迭代查询<ul><li>当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出IP地址，要么告诉本地域名服务器，应该向哪一个域名服务器进行查询，然后本地域名服务器进行后续查询</li></ul></li></ul><h2 id="统一资源定位符URL"><a href="#统一资源定位符URL" class="headerlink" title="统一资源定位符URL"></a>统一资源定位符URL</h2><p>统一资源定位符URL，用来表示从互联网上得到的资源位置。</p><ul><li><p>一般由四个部分组成</p><ul><li>&lt;协议&gt;:&#x2F;&#x2F;&lt;主机&gt;:&lt;端口&gt;&#x2F;&lt;路径&gt;</li><li>主机一般为域名，需要通过DNS系统解析出IP</li></ul></li><li><p>使用HTTP的URL</p><ul><li>http:&#x2F;&#x2F;&lt;主机&gt;:&lt;端口&gt;&#x2F;&lt;路径&gt;</li></ul></li></ul><h2 id="描述一下HTTP协议"><a href="#描述一下HTTP协议" class="headerlink" title="描述一下HTTP协议"></a><a href="https://www.cnblogs.com/ranyonsue/p/5984001.html">描述一下HTTP协议</a></h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写，是用于从万维网（WWW:World Wide Web）服务器传输超文本到本地浏览器的传送协议。</li><li>HTTP属于应用层协议，基于TCP&#x2F;IP通信协议来传递数据</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>灵活<ul><li>HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li></ul></li><li>无连接<ul><li>无连接的含义是通信双方在交换HTTP报文之前不需要建立HTTP连接</li></ul></li><li>无状态<ul><li>无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时应答较快。</li></ul></li><li>支持B&#x2F;S和C&#x2F;S模式</li><li>默认端口80</li><li>基于TCP协议</li></ul><h3 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h3><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。</p><ul><li>客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。</li><li>服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</li></ul><p><strong>HTTP 请求&#x2F;响应的步骤</strong></p><blockquote><ul><li><strong>客户端连接到Web服务器</strong><br>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.oakcms.cn./">http://www.oakcms.cn。</a><blockquote><ul><li><strong>发送HTTP请求</strong><br>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。<blockquote><ul><li><strong>服务器接受请求并返回HTTP响应</strong><br>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。<blockquote><ul><li><strong>释放连接TCP连接</strong><br>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;<blockquote><ul><li><strong>客户端浏览器解析HTML内容</strong><br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</li></ul></blockquote></li></ul></blockquote></li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><h2 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a><a href="https://www.cnblogs.com/heluan/p/8620312.html">HTTP2</a></h2><ul><li>新的二进制格式（Binary Format）<ul><li>HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</li></ul></li><li>多路复用（MultiPlexing）<ul><li>即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</li><li>pipelining在接收response返回时，必须依顺序接收，如果前一个请求遇到了阻塞，后面的请求即使已经处理完毕了，仍然需要等待阻塞的请求处理完毕。这种情况就如图中第三种，第一个请求阻塞后，后面的请求都需要等待，这也就是队头阻塞</li></ul></li><li>header压缩<ul><li>对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小</li></ul></li><li>服务端推送<ul><li>我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了</li></ul></li></ul><h2 id="HTTP持久连接与管线化"><a href="#HTTP持久连接与管线化" class="headerlink" title="HTTP持久连接与管线化"></a>HTTP持久连接与管线化</h2><p>HTTP协议首先要和服务器建立TCP连接，这需要三次握手。</p><ul><li><p>请求一个万维网文档的时间</p><ul><li>当建立TCP连接的三次握手前两次完成后，即经过一个RTT时间，万维网客户就把HTTP请求报文，作为建立TCP连接的三次握手中的第三次的数据，发送给万维网服务器，服务器收到HTTP请求后，把请求的文档作为响应报文返回给客户。</li><li>文档传输时间+2*RTT</li></ul></li><li><p>HTTP1.0非持久连接的缺点</p><ul><li>每请求一个文档，需要两倍RTT的开销。服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接，然后重新建立连接发出请求</li></ul></li><li><p>HTTP1.1持久连接</p><ul><li>万维网服务器在发送响应后仍然在一段时间内保持这段连接，可以使得同一用户继续在该连接上传送后续请求和响应报文</li></ul></li><li><p>持久连接的两种工作方式</p><ul><li>非管线化<ul><li>发送请求后需等待并收到回应，才能发送下一个请求</li></ul></li><li>管线化<ul><li>不用等待响应，直接发送下一个请求，但接收的时候必须按照顺序接收，如果有一个请求阻塞，则接收会全部阻塞</li></ul></li></ul></li></ul><h2 id="HTTP协议请求报文具体信息"><a href="#HTTP协议请求报文具体信息" class="headerlink" title="HTTP协议请求报文具体信息"></a>HTTP协议请求报文具体信息</h2><p>HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据四个部分组成</p><ul><li><p><strong>GET</strong></p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++">GET /<span class="hljs-number">562</span>f25980001b1b<span class="hljs-number">106000338.</span>jpg HTTP/<span class="hljs-number">1.1</span><br>Host:img.mukewang.com<br>User-Agent:Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; WOW64)<br>AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">51.0</span><span class="hljs-number">.2704</span><span class="hljs-number">.106</span> Safari/<span class="hljs-number">537.36</span><br>Accept:image/webp,image<span class="hljs-comment">/*,*/</span>*;q=<span class="hljs-number">0.8</span><br>Referer:http:<span class="hljs-comment">//www.imooc.com/</span><br>Accept-Encoding:gzip, deflate, sdch<br>Accept-Language:zh-CN,zh;q=<span class="hljs-number">0.8</span><br>空行<br>请求数据为空<br></code></pre></td></tr></table></figure></li><li><p><strong>POST</strong></p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">POST / HTTP<span class="hljs-number">1.1</span><br>Host:www.wrox.com<br>User-Agent:Mozilla/<span class="hljs-number">4.0</span> (compatible; MSIE <span class="hljs-number">6.0</span>; Windows NT <span class="hljs-number">5.1</span>; SV1; .NET CLR <span class="hljs-number">2.0</span><span class="hljs-number">.50727</span>; .NET CLR <span class="hljs-number">3.0</span><span class="hljs-number">.04506</span><span class="hljs-number">.648</span>; .NET CLR <span class="hljs-number">3.5</span><span class="hljs-number">.21022</span>)<br>Content-Type:application/x-www-form-urlencoded<br>Content-Length:<span class="hljs-number">40</span><br>Connection: Keep-Alive<br>空行<br>name=Professional%<span class="hljs-number">20</span>Ajax&amp;publisher=Wiley<br></code></pre></td></tr></table></figure></li></ul><blockquote><ul><li><strong>请求行</strong>，用来说明请求类型,要访问的资源以及所使用的HTTP版本.<br>GET说明请求类型为GET，&#x2F;562f25980001b1b106000338.jpg(URL)为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。<blockquote><ul><li><strong>请求头部</strong>，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</li></ul></blockquote><ul><li>HOST，给出请求资源所在服务器的域名.</li><li>User-Agent，HTTP客户端程序的信息，该信息由你发出请求使用的浏览器来定义,并且在每个请求中自动发送等</li><li>Accept，说明用户代理可处理的媒体类型</li><li>Accept-Encoding，说明用户代理支持的内容编码</li><li>Accept-Language，说明用户代理能够处理的自然语言集</li><li>Content-Type，说明实现主体的媒体类型</li><li>Content-Length，说明实现主体的大小</li><li>Connection，连接管理，可以是Keep-Alive或close<blockquote><ul><li><strong>空行</strong>，请求头部后面的空行是必须的即使第四部分的请求数据为空，也必须有空行。</li><li><strong>请求数据</strong>也叫主体，可以添加任意的其他数据。</li></ul></blockquote></li></ul></li></ul></blockquote><h2 id="GET和POST区别"><a href="#GET和POST区别" class="headerlink" title="GET和POST区别"></a>GET和POST区别</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">GET /books/?sex=man&amp;name=Professional HTTP/<span class="hljs-number">1.1</span><br>Host: www.wrox.com<br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows; U; Windows NT <span class="hljs-number">5.1</span>; en-US; rv:<span class="hljs-number">1.7</span><span class="hljs-number">.6</span>)<br>Gecko/<span class="hljs-number">20050225</span> Firefox/<span class="hljs-number">1.0</span><span class="hljs-number">.1</span><br>Connection: Keep-Alive<br>空行<br>请求数据为空<br></code></pre></td></tr></table></figure><ul><li>区别<ul><li><strong>get参数通过url传递，post放在request body中</strong>，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</li><li><strong>POST的安全性要比GET的安全性高</strong>，一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</li><li><strong>get请求在url中传递的参数是有长度限制的，而post没有</strong></li><li><strong>GET产生一个TCP数据包，POST产生两个TCP数据包</strong>。 <ul><li>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</li><li>对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）</li></ul></li></ul></li></ul><h2 id="HTTP协议响应报文具体信息"><a href="#HTTP协议响应报文具体信息" class="headerlink" title="HTTP协议响应报文具体信息"></a>HTTP协议响应报文具体信息</h2><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Date: Fri, <span class="hljs-number">22</span> May <span class="hljs-number">2009</span> <span class="hljs-number">06</span>:<span class="hljs-number">07</span>:<span class="hljs-number">21</span> GMT<br>Content-Type: text/html; charset=UTF<span class="hljs-number">-8</span><br>&lt;html&gt;<br>      &lt;head&gt;&lt;/head&gt;<br>      &lt;body&gt;<br>            &lt;!--body goes here--&gt;<br>      &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><ul><li>状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br>第一行为状态行，（HTTP&#x2F;1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为OK<blockquote><ul><li>消息报头，用来说明客户端要使用的一些附加信息<br>第二行和第三行为消息报头，Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text&#x2F;html),编码类型是UTF-8<blockquote><ul><li>空行，消息报头后面的空行是必须的</li><li>响应正文，服务器返回给客户端的文本信息。空行后面的html部分为响应正文</li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求正常处理完毕。<ul><li>200 OK：客户端请求被正常处理 </li><li>206 Partial content：客户端进行了范围请求</li></ul></li><li>3xx：重定向–要完成请求必须进行更进一步的操作。<ul><li>301 Moved Permanently：永久重定向，该资源已被永久移动到新位置，将来任何对该资源的访问都要使用本响应返回的若干个URI之一</li><li>302 Found：临时重定向，请求的资源现在临时从不同的URI中获得</li></ul></li><li>4xx：客户端错误–请求有语法错误，服务器无法处理请求。<ul><li>400 Bad Request：请求报文存在语法错误</li><li>403 Forbidden：请求被服务器拒绝</li><li>404 Not Found：请求不存在，服务器上找不到请求的资源</li></ul></li><li>5xx：服务器端错误–服务器处理请求出错。 <ul><li>500 Internal Server Error：服务器在执行请求时出现错误</li><li>503 Service Unavaliable：服务器正在停机维护</li></ul></li></ul><h2 id="浏览器键入URL后的访问流程"><a href="#浏览器键入URL后的访问流程" class="headerlink" title="浏览器键入URL后的访问流程"></a>浏览器键入URL后的访问流程</h2><ul><li>浏览器使用<strong>DNS协议</strong>向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址，其中DNS服务器是基于UDP的，因此会用到<strong>UDP协议</strong>;</li><li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接，会使用到<strong>TCP协议</strong>;</li><li>然后浏览器就要与服务器建立一个http连接，因此要用到<strong>http协议</strong>，http生成一个get请求报文，如果采用https还会使用<strong>https协议</strong>对http数据进行加密，涉及到<strong>SSL协议</strong>，将报文发送到TCP层</li><li>TCP层如果有需要先将HTTP数据包分片，分片依据MTU和MSS（ mtu是网络传输最大报文包,mss是网络传输数据最大值）。</li><li>TCP的数据包然后会发送给IP层，用到<strong>IP协议</strong>。IP层通过路由选路，一跳一跳发送到目的地址。</li><li>当然在一个网段内的寻址是通过以太网协议实现，<strong>以太网协议</strong>需要知道目的IP地址的物理地址，则需要<strong>ARP协议</strong>。</li><li>服务器端接收到请求，然后发送返回响应请求</li><li>释放 TCP连接(若connection为close，则释放TCP连接，若为keep-alive则不会释放);</li><li>浏览器将该解析html文本并显示内容</li></ul><p>　</p><h2 id="IP-TCP-UDP分片"><a href="#IP-TCP-UDP分片" class="headerlink" title="IP&#x2F;TCP&#x2F;UDP分片"></a>IP&#x2F;TCP&#x2F;UDP分片</h2><p>数据发送时，将数据从应用层-&gt;传输层-&gt;网络层-&gt;数据链路层，其中传输层是TCP和UDP，网络层是IP协议。</p><ul><li>MTU以太网帧的长度为1500字节，所能接收的传输层数据段最大为 1480 个字节（以太网帧中的数据包括 IP 协议的报头信息，IP 协议的报头信息为 20 字节）</li><li>在计算 MSS （网络传输数据最大值）的时候，用 MTU 减去网络层报头长度以及传输层报头长度即可。</li><li>UDP<ul><li>一旦 UDP 携带的数据超过了 1472 （MTU - IP报头 - UDP报头 &#x3D; 1500 - 20 - 8），那么在 IP 层就会对该数据分片，一旦分片就意味着增加了 UDP 传输丢包的可能性。 由于 UDP 协议传输本身就不负责可靠性，再加上分片，那么丢包的可能性就大大增加</li></ul></li></ul><div align=center><img width="970" height="240" src="https://github.com/twomonkeyclub/BackEnd/blob/master/%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/utils/mtu.png"/></div><h2 id="对称密钥和公钥密码体制"><a href="#对称密钥和公钥密码体制" class="headerlink" title="对称密钥和公钥密码体制"></a>对称密钥和公钥密码体制</h2><ul><li>对称密钥密码体制<ul><li>加密密码和解密密码是相同的密钥</li></ul></li><li>公钥密码体制，非对称加密<ul><li>加密密码和解密密码不同</li><li>加密和解密算法都是公开的，加密密钥也是公开的，解密密钥是保密的</li><li>公钥和私钥是配对关系，公钥加密就用私钥解密，反之亦然</li></ul></li></ul><h2 id="数字签名和数字证书"><a href="#数字签名和数字证书" class="headerlink" title="数字签名和数字证书"></a><a href="https://juejin.im/post/5b8f3190e51d4538a67abfad">数字签名和数字证书</a></h2><p> 使用公钥密码加密的一般流程：通过A的公钥对报文加密，发送给B，然后B拿A的私钥进行解密，得到报文.<br> <strong>注意：并不是每次传输报文的时候都要加数字签名，数字签名一般用于数字证书的验证，这样的话浏览器内置的CA拥有服务端的公钥和私钥。</strong></p><ul><li><p>数字签名</p><ul><li><p>普通数字签名(<strong>能核实发送者，但无法保证报文完整性</strong>)</p><ul><li>A通过A的私钥对报文进行加密，将其附在报文的后面，发送给B，然后B拿A的公钥对附加信息进行解密的过程，为数字签名</li><li>上述过程中仅仅实现了数字签名，但并没有对实际报文进行加密。实际操作时，可以通过A–&gt;A私钥(数字签名)–&gt;B公钥(报文加密)–&gt;B私钥(报文解密)–&gt;A公钥(验证数字签名)</li></ul></li><li><p>密码散列函数</p><ul><li>使用密码散列函数对报文进行与运算得到hash值，简称摘要</li><li>密码散列函数有MD5和安全散列算法SHA</li></ul></li><li><p>报文摘要数字签名(<strong>核实发送者，保证报文完整性</strong>)<br>  对报文本身加密可能是个耗时过程，比如这封Email足够大，那么私钥加密整个文件以及拿到文件后的解密无疑是巨大的开销</p><ul><li>A先对这封Email执行哈希运算得到hash值简称“摘要”，取名h1</li><li>然后用自己私钥对摘要加密，生成的东西叫“数字签名”</li><li>把数字签名加在Email正文后面，一起发送给B</li><li>防止邮件被窃听你可以用继续B公钥加密</li><li>B收到邮件后使用B私钥对报文解密，用A的公钥对数字签名解密，成功则代表Email确实来自A，失败说明有人冒充</li><li>B对邮件正文执行哈希运算得到hash值，取名h2</li><li>B会对比数字签名的hash值h1和自己运算得到的h2，一致则说明邮件未被篡改。</li></ul></li><li><p>数字签名的作用</p><ul><li>确认核实发送者</li><li>保证报文的完整性</li><li>一般用于验证数字证书</li></ul></li></ul></li><li><p>数字证书<br>  明文和数字签名共同组成了数字证书，这样一份数字证书就可以颁发给网站了，由认证中心（CA）或者认证中心的下级认证中心颁发。通俗来说，A确认收到的公钥真的是B的公钥，而不是别人伪造的</p><ul><li>制作数字签名<ul><li>CA拥有非对称加密的私钥和公钥。</li><li>CA对证书明文信息进行hash。</li><li>对hash后的值用私钥加密，得到数字签名</li><li>明文和数字签名共同组成了数字证书</li></ul></li><li>数字证书验证过程<ul><li>拿到证书，得到明文T，数字签名S。</li><li>用CA机构的公钥对S解密，得到S’。（由于是浏览器信任的机构，浏览器保有它的公钥，操作系统、浏览器本身会预装一些它们信任的根证书，如果其中有该CA机构的根证书，那就可以拿到它对应的可信公钥）</li><li>用证书里说明的hash算法对明文T进行hash得到T’。</li><li>比较S’是否等于T’，等于则表明证书可信。</li></ul></li></ul></li></ul><h2 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h2><blockquote><ul><li>HTTP协议是以明文的方式在网络中传输数据，而HTTPS协议传输的数据则是经过TLS加密后的，HTTPS具有更高的安全性</li><li>HTTPS可以保证报文完整性，另外可以核实发送者身份</li><li>HTTPS协议需要服务端申请证书，浏览器端安装对应的根证书</li><li>HTTPS在TCP三次握手阶段之后，还需要进行SSL的handshake，协商加密使用的对称加密密钥</li><li>HTTP协议端口是80，HTTPS协议端口是443</li></ul></blockquote><h2 id="运输层安全协议及SSL工作过程"><a href="#运输层安全协议及SSL工作过程" class="headerlink" title="运输层安全协议及SSL工作过程"></a>运输层安全协议及SSL工作过程</h2><ul><li>SSL 安全套接字层协议</li><li>TLS 运输层安全协议，在SSL的基础上设计</li><li>SSL工作过程<ul><li>协商加密算法<ul><li>浏览器A向服务器B发送SSL版本，及自身支持的加密组件（包括加密算法及密钥长度等）</li><li>B从中选择自身支持的加密组件和SSL版本，发送给A</li></ul></li><li>服务器鉴别<ul><li>B向A发送包含公开密钥的数字证书</li><li>A对数字证书进行鉴别，获取B的公钥</li></ul></li><li>会话密钥计算<ul><li>A随机产生秘密数，将秘密数通过B的公钥发送给B，之后A通过协商的加密算法产生会话密钥</li><li>B接收到秘密数后，通过B的私钥将其解密得到秘密数，然后根据协商加密算法产生会话密钥</li></ul></li><li>安全数据传输<ul><li>双方会互相发送一次数据，用会话密钥加密和解密他们之间传达的数据并验证其完整性</li></ul></li><li>通信<ul><li>上述验证通过后，才继续进行http通信</li></ul></li></ul></li></ul><h2 id="HTTPS必须在每次请求中都要先在SSL-TLS层进行握手传输密钥吗？"><a href="#HTTPS必须在每次请求中都要先在SSL-TLS层进行握手传输密钥吗？" class="headerlink" title="HTTPS必须在每次请求中都要先在SSL&#x2F;TLS层进行握手传输密钥吗？"></a>HTTPS必须在每次请求中都要先在SSL&#x2F;TLS层进行握手传输密钥吗？</h2><p>显然每次请求都经历一次密钥传输过程非常耗时，那怎么达到只传输一次呢？用session就行。</p><ul><li>服务器会为每个浏览器（或客户端软件）维护一个session ID，在TSL握手阶段传给浏览器，浏览器生成好密钥传给服务器后，服务器会把该密钥存到相应的session ID下</li><li>之后浏览器每次请求都会携带session ID，服务器会根据session ID找到相应的密钥并进行解密加密操作，这样就不必要每次重新制作、传输密钥了！</li></ul><h2 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h2><p>HTTP协议作为无状态协议，对于HTTP协议而言，无状态指每次request请求之前是相互独立的，当前请求并不会记录它的上一次请求信息，如何将上下文请求进行关联呢？<strong>客户端（不同的浏览器）记录用户的状态通过cookie，服务器端（不同的网站）记录用户的状态通过session。</strong></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a><strong>工作流程</strong></h4><ul><li>客户端请求服务器端，服务器端产生cookie响应头，随响应报文发送给客户端，客户端将cookie文本保存起来</li><li>下次客户端再次请求服务端时，会产生cookie请求头，将之前服务器发送的cookie信息，再发送给服务器，服务器就可以根据cookie信息跟踪客户端的状态。</li></ul><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h4><p>Cookie总是保存在客户端中，按在客户端中的存储位置，可分为内存Cookie和硬盘Cookie，它是服务器端存放在本地机器中的数据，随每一个请求发送给服务器，由于Cookie在客户端，所以可以编辑伪造，不是十分安全。</p><ul><li>非持久cookie<ul><li>内存Cookie由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。</li></ul></li><li>持久cookie<ul><li>硬盘Cookie保存在硬盘里，有一个过期时间（客户端cookie设置的时间），除非用户手工清理或到了过期时间，硬盘Cookie不会被删除，其存在时间是长期的。</li></ul></li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><h4 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a><strong>工作流程</strong></h4><ul><li>当用户第一次访问站点时，服务器端为用户创建一个sessionID，这就是针对这个用户的唯一标识，每一个访问的用户都会得到一个自己独有的session ID，这个session ID会存放在响应头里的cookie中，之后发送给客户端。这样客户端就会拥有一个该站点给他的session ID。</li><li>当用户第二次访问该站点时，浏览器会带着本地存放的cookie(里面存有上次得到的session ID)随着请求一起发送到服务器，服务端接到请求后会检测是否有session ID，如果有就会找到响应的session文件，把其中的信息读取出来；如果没有就跟第一次一样再创建个新的。</li></ul><h4 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h4><p>session是存放在服务器里的，所以session 里的东西不断增加会增加服务器的负担，我们会把一些重要的东西放在session里，不太重要的放在客户端cookie里</p><ul><li><p>session失效</p><ul><li>服务器（非正常）关闭时</li><li>session过期&#x2F;失效（默认30分钟）<ul><li>问题：时间的起算点 从何时开始计算30分钟？从不操作服务器端的资源开始计时（例如：当你访问淘宝页面时，点开页面不动，第29分钟再动一下页面，就得重新计时30分钟；当过了30分钟，就失效了。）</li></ul></li><li>手动销毁session</li></ul></li><li><p>sessionID的传递方式</p><ul><li>通过cookie传递</li><li>当cookie禁用后，可以通过url传递</li></ul></li><li><p>不同场景下的session</p><ul><li>当在同一个浏览器中同时打开多个标签，发送同一个请求或不同的请求，仍是同一个session;</li><li>当不在同一个窗口中打开相同的浏览器时（打开多个相同的浏览器），发送请求，仍是同一个session;</li><li>当使用不同的浏览器时，发送请求，即使发送相同的请求，是不同的session;</li><li>当把当前某个浏览器的窗口全关闭，再打开，发起相同的请求时，是不同的session。</li></ul></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>cookie数据存放在客户的浏览器上，session数据放在服务器上。</li><li>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。</li><li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。</li><li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</li><li>可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。</li></ul><h2 id="浏览器关闭后，session就销毁了吗？"><a href="#浏览器关闭后，session就销毁了吗？" class="headerlink" title="浏览器关闭后，session就销毁了吗？"></a><a href="https://blog.csdn.net/qq1012421396/article/details/70842148">浏览器关闭后，session就销毁了吗？</a></h2><p>浏览器关闭和服务器session销毁没有任何关系，会话Cookie（非持久cookie）在关闭浏览器后就会消失，但是原来服务器的Session还在，只有等到了销毁的时间会自动销毁。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>计算机基础</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【计算机基础知识】操作系统</title>
    <link href="/2025/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/README/"/>
    <url>/2025/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/README/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><blockquote><ul><li><a href="#%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86">程序的局部性原理</a></li><li><a href="#%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">跨平台技术实现原理</a></li><li><a href="#%E5%BA%93%E5%87%BD%E6%95%B0%E5%92%8C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB">库函数和系统调用的区别</a></li><li><a href="#%E5%B9%B6%E8%A1%8C%E5%92%8C%E5%B9%B6%E5%8F%91">并行和并发</a></li><li><a href="#%E8%AE%A1%E7%AE%97%E5%AF%86%E9%9B%86%E4%BB%BB%E5%8A%A1%E5%92%8CIO%E5%AF%86%E9%9B%86%E4%BB%BB%E5%8A%A1">计算密集任务和IO密集任务</a></li><li><a href="#%E5%8D%95%E6%A0%B8CPU%E5%A4%9A%E6%A0%B8CPU%E5%A4%9ACPU">单核CPU&#x2F;多核CPU&#x2F;多CPU</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B">什么时候使用多线程和多进程</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E4%B8%8EPCB">进程与PCB</a></li><li><a href="#forkvforkclone">fork、v_fork、clone</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1">进程间通信</a></li><li><a href="#%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86">共享内存底层原理</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%BC%9A%E9%94%80%E6%AF%81%E5%90%97">进程异常退出共享内存会销毁吗</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95">进程调度算法</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E6%97%B6%E6%9C%BA">进程调度时机</a></li><li><a href="#%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B">僵尸进程和孤儿进程</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB">进程状态转移</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E5%92%8C%E7%A7%81%E6%9C%89%E8%B5%84%E6%BA%90">进程间共享和私有资源</a></li><li><a href="#%E7%BA%BF%E7%A8%8B">线程</a></li><li><a href="#%E5%8D%8F%E7%A8%8B">协程</a></li><li><a href="#%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E5%8F%8A%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8">线程间同步及系统调用</a></li><li><a href="#%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E5%92%8C%E7%A7%81%E6%9C%89%E8%B5%84%E6%BA%90">线程间共享和私有资源</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB">进程与线程的区别</a></li><li><a href="#%E7%94%A8%E6%88%B7%E6%80%81%E5%92%8C%E5%86%85%E6%A0%B8%E6%80%81">用户态和内核态</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98">什么是虚拟内存</a></li><li><a href="#%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD">缺页中断</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95">虚拟内存置换算法</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E9%A1%B5%E8%A1%A8%E5%AF%BB%E5%9D%80">虚拟内存页表寻址</a></li><li><a href="#%E8%AF%B4%E4%B8%80%E4%B8%8BLINUX%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%94%81">说一下LINUX系统中的锁</a></li><li><a href="#%E8%87%AA%E6%97%8B%E9%94%81%E5%8F%91%E7%94%9F%E6%AD%BB%E9%94%81">自旋锁发生死锁</a></li><li><a href="#%E6%AD%BB%E9%94%81%E4%BA%A7%E7%94%9F%E7%9A%84%E6%9D%A1%E4%BB%B6">死锁产生的条件</a></li><li><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81">如何避免死锁</a></li><li><a href="#%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B%E5%92%8C%E6%AD%BB%E9%94%81%E6%81%A2%E5%A4%8D">死锁检测和死锁恢复</a></li><li><a href="#%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6">信号处理机制</a></li><li><a href="#%E5%93%AA%E4%B8%A4%E4%B8%AA%E4%BF%A1%E5%8F%B7%E4%B8%8D%E8%83%BD%E5%BF%BD%E7%95%A5">哪两个信号不能忽略</a></li><li><a href="#%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%92%8C%E9%94%81%E6%9C%BA%E5%88%B6">原子操作和锁机制</a></li></ul></blockquote><h2 id="程序的局部性原理"><a href="#程序的局部性原理" class="headerlink" title="程序的局部性原理"></a>程序的局部性原理</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>程序倾向于引用临近于其他最近引用过的数据项的数据项，或最近引用过的数据项本身，这种倾向性被称为局部性原理。</p><ul><li>时间局部性<ul><li>良好时间局部性的程序中，被引用过一次的内存位置很可能在不远的将来再被多次引用</li></ul></li><li>空间局部性<ul><li>良好空间局部性的程序中，一个内存位置被引用，程序很可能在不远的将来引用其附近的一个内存位置</li></ul></li></ul><h3 id="从硬件和操作系统层面看如何利用局部性"><a href="#从硬件和操作系统层面看如何利用局部性" class="headerlink" title="从硬件和操作系统层面看如何利用局部性"></a>从硬件和操作系统层面看如何利用局部性</h3><ul><li>硬件层<ul><li>局部性原理允许硬件引入高速缓存存储器这种小而快速的存储器来存储最近被引用的指令和数据，从而提高对主存的访问速度</li></ul></li><li>操作系统<ul><li>允许系统使用主存作为虚拟地址空间作为最近被引用块的高速缓存</li></ul></li></ul><h3 id="从存储结构看如何利用局部性"><a href="#从存储结构看如何利用局部性" class="headerlink" title="从存储结构看如何利用局部性"></a><a href="https://www.jianshu.com/p/5c9b28c95c64">从存储结构看如何利用局部性</a></h3><p>存储器层次结构的中心思想是，对于每个 k，位于 k 层的更快更小的存储设备作为位于 k + 1 层的更大更慢的存储设备的缓存。</p><ul><li>时间局部性<ul><li>同一数据对象可能被多次使用。一旦一个数据对象在第一次不命中时被复制到缓存中，我们就会期望后面对目标有一系列的访问命中。因为缓存比低一层的存储设备更快，对后面的命中的服务会比最开始的不命中的快很多。</li></ul></li><li>空间局部性<ul><li>块通常包含多个数据对象。我们会期望后面对该块中其他对象的访问能补偿不命中后复制该块的花费。</li></ul></li></ul><h2 id="库函数和系统调用的区别"><a href="#库函数和系统调用的区别" class="headerlink" title="库函数和系统调用的区别"></a><a href="https://www.cnblogs.com/liwei0526vip/p/8998751.html">库函数和系统调用的区别</a></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>库函数调用是语言或应用程序的一部分，而系统调用是操作系统的一部分，跨平台技术的原理就是通过库函数实现的，库函数可以理解为是对系统调用的一层封装，但库函数不是必须包含系统调用。</li><li>库函数有可能包含有一个系统调用，有可能有好几个系统调用，当然也有可能没有系统调用，比如有些操作不需要涉及内核的功能。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><blockquote><ul><li>所有 C 函数库是相同的，而各个操作系统的系统调用是不同的。</li><li>函数库调用是调用函数库中的一个程序，而系统调用是调用系统内核的服务。</li><li>函数库调用是与用户程序相联系，而系统调用是操作系统的一个进入点</li><li>函数库调用是在用户地址空间执行，而系统调用是在内核地址空间执行</li><li>函数库调用的运行时间属于「用户」时间，而系统调用的运行时间属于「系统」时间</li><li>函数库调用属于过程调用，开销较小，而系统调用需要切换到内核上下文环境然后切换回来，开销较大</li><li>在C函数库libc中大约 300 个程序，在 UNIX 中大约有 90 个系统调用</li><li>函数库典型的 C 函数：system, fprintf, malloc，而典型的系统调用：chdir, fork, write, brk</li></ul></blockquote><h3 id="为什么不直接用函数调用"><a href="#为什么不直接用函数调用" class="headerlink" title="为什么不直接用函数调用"></a>为什么不直接用函数调用</h3><ul><li>因为读写文件通常是大量的数据（相对于底层驱动的系统调用所实现的数据操作单位），这时，使用库函数可以大大减少系统调用的次数。这是因为<strong>缓冲区技术</strong>，在用户空间和内核空间对文件操作都使用了缓冲区。当用户空间缓冲区满或者写操作结束时，才将用户缓冲区的内容写到内核缓存区。同理，内核缓冲区满或写结束时，才将内核缓冲区内容写到文件对应的硬件媒介。</li><li>为了保证可移植性</li></ul><h3 id="库函数的缓冲区"><a href="#库函数的缓冲区" class="headerlink" title="库函数的缓冲区"></a><a href="https://blog.csdn.net/it_liuwei/article/details/45022671">库函数的缓冲区</a></h3><ul><li>对于库函数，如果标准输出连到终端设备(直接输出到屏幕)，则它是行缓冲的（遇到回车换行符或者是缓冲区满了才输出）；否则（输出到文件）是全缓冲的（缓冲区填满或者是程序运行结束了才输出）。</li><li>程序运行结束时，会刷新所有的缓冲区。</li></ul><p>由于上面的缓冲机制，也给我们编写程序时带来了一些奇怪的问题。解决办法有如下两种：</p><ul><li>任何时候我们都可以使用fflush(stdout)来刷新标准输出缓冲区。</li><li>使用不带缓冲的系统调用write替代printf输出。</li></ul><h3 id="系统调用底层原理"><a href="#系统调用底层原理" class="headerlink" title="系统调用底层原理"></a>系统调用底层原理</h3><ul><li>每个系统调用函数都有一个系统调用号</li><li>首先找到系统调用对应的中断号（Linux下是int 0x80），然后在中断向量表中找到对应的中断处理函数，再根据系统调用号，在中断处理函数找到对应系统调用函数进行执行。</li></ul><h2 id="跨平台技术实现原理"><a href="#跨平台技术实现原理" class="headerlink" title="跨平台技术实现原理"></a><a href="https://segmentfault.com/q/1010000005178192">跨平台技术实现原理</a></h2><p>现有跨平台技术就是通过库函数调用实现的，不使用系统函数调用。</p><ul><li>Qt如何识别不同系统<ul><li>Qt各个操作系统都有特定的宏，然后代码里面根据不同的宏调用不同平台的API</li></ul></li></ul><h2 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h2><ul><li><p>并发</p><ul><li>在同一时刻只能有一条指令执行，但多个进程指令被快速轮换执行，使得在宏观上具有多个进程同时执行的效果。</li></ul></li><li><p>并行</p><ul><li>在同一时刻，有多条指令在多个处理器上同时执行。</li></ul></li></ul><h2 id="计算密集任务和IO密集任务"><a href="#计算密集任务和IO密集任务" class="headerlink" title="计算密集任务和IO密集任务"></a>计算密集任务和IO密集任务</h2><ul><li><p>计算密集型任务</p><ul><li>特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。</li><li>虽然可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</li></ul></li><li><p>IO密集型任务</p><ul><li>涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。</li><li>对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</li></ul></li></ul><h2 id="单核CPU-多核CPU-多CPU"><a href="#单核CPU-多核CPU-多CPU" class="headerlink" title="单核CPU&#x2F;多核CPU&#x2F;多CPU"></a><a href="https://www.cnblogs.com/csfeng/p/8670704.html">单核CPU&#x2F;多核CPU&#x2F;多CPU</a></h2><blockquote><ul><li>都是一个CPU，不同的是每个CPU上的核心数。</li><li>多核CPU是多个CPU的替代方案，同时也减少了功耗。</li><li>一个核心只能同时执行一个线程。</li></ul></blockquote><ul><li>单核CPU<ul><li>一个CPU中只有一个核心处理器</li></ul></li><li>多核CPU<ul><li>一个CPU有多个核心处理器，处理器之间通过<strong>CPU内部总线</strong>进行通讯</li></ul></li><li>多CPU<ul><li>简单的多个CPU工作在同一个系统上，多个CPU之间通过<strong>主板上的总线</strong>进行通讯</li></ul></li></ul><h3 id="深入理解进程和线程"><a href="#深入理解进程和线程" class="headerlink" title="深入理解进程和线程"></a>深入理解进程和线程</h3><ul><li><p>进程的调度和资源分配是操作系统负责</p></li><li><p>线程的调度和资源分配是CPU负责</p></li><li><p>进程是操作系统资源分配(包括cpu、内存、磁盘IO等)的基本单位，一个CPU同时刻只能执行一个进程</p><ul><li><strong>单核CPU实现多进程，并发。</strong> 通过操作系统的进程调度算法，单核CPU进行进程调度的时候，需要读取上下文+执行程序+保存上下文，即进程切换。</li><li><strong>多CPU实现多进程，并行。</strong> 不同的进程运行在不同的CPU上。</li></ul></li><li><p>线程是CPU调度和资源分配的基本单位，一个CPU核心同时刻只能执行一个线程</p><ul><li><strong>单核CPU实现多线程，并发。</strong> 不同线程为了使用CPU核心，则会进行线程切换，但是由于共享了程序执行环境，这个线程切换比进程切换开销少了很多。</li><li><strong>多核CPU实现多线程，并行。</strong> CPU可以将不同线程分配到不同的CPU核心处理器中。</li></ul></li></ul><blockquote><ul><li>单CPU中进程只能是并发，多CPU计算机中进程可以并行。</li><li>单CPU单核中线程只能并发，单CPU多核中线程可以并行。</li><li>并行有上限，进程与CPU个数，线程与CPU核心个数有关，并不是所有线程和所有进程都能同时运行</li></ul></blockquote><h2 id="什么时候使用多进程和多线程"><a href="#什么时候使用多进程和多线程" class="headerlink" title="什么时候使用多进程和多线程"></a>什么时候使用多进程和多线程</h2><ul><li>多核CPU——计算密集型任务。此时要尽量使用多线程，可以提高任务执行效率，例如加密解密，数据压缩解压缩（视频、音频、普通数据），否则只能使一个核心满载，而其他核心闲置.</li><li>单核CPU——计算密集型任务。此时的任务已经把CPU资源100%消耗了，就没必要也不可能使用多线程来提高计算效率了；相反，如果要做人机交互，最好还是要用多线程，避免用户没法对计算机进行操作。</li><li>单核CPU——IO密集型任务，使用多线程还是为了人机交互方便.</li><li>多核CPU——IO密集型任务，这就更不用说了，跟单核时候原因一样。</li></ul><h2 id="进程与PCB"><a href="#进程与PCB" class="headerlink" title="进程与PCB"></a><a href="https://blog.csdn.net/lvyibin890/article/details/82193900">进程与PCB</a></h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li>进程是操作系统的资源分配单位，实现操作系统的并发，对于一个进程，它在被执行前其实是一个可执行程序。这个程序是被放在磁盘上的，当它要被执行的时候，它先被加载到内存当中，然后再放入到寄存器中，最后再让cpu执行该程序，这个时候一个静态的程序就变成了进程</li><li>进程创建时会分配4G的内存，其中0-3G是用户空间，3-4G是内核空间，PCB存在于内核空间</li><li>进程的用户空间是不同的，内核空间也是不同的。比如每个进程的不同系统调用，是陷入自己独立的内核空间里面，所以每个进程内核的堆栈肯定是不一样的</li></ul><h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><ul><li>每个进程的PCB都是存在所有进程共享的内核空间中，操作系统管理进程，也就是在内核空间中管理的，在内核空间中通过链表管理所有进程的PCB，如果有一个进程要被创建，实际上多分配了这么一个4G的虚拟内存，并在共享的内核空间中的双向链表中加入了自己的PCB。</li><li>PCB(Process Control Block)进程控制块，描述进程的基本信息和运行状态，<strong>进程的创建和销毁都是对PCB进行操作</strong>，PCB的具体内容如下<ul><li>标识相关：pid，ppid等等</li><li>文件相关：进程需要记录打开的文件信息，于是需要文件描述符表</li><li>内存相关：内存指针，指向进程的虚拟地址空间（用户空间）信息</li><li>优先级相关：进程相对于其他进程的调度优先级</li><li>上下文信息相关：CPU的所有寄存器中的值、进程的状态以及堆栈上的内容，当内核需要切换到另一个进程时，需要保存当前进程的所有状态，即保存当前进程的进程上下文，以便再次执行该进程时，能够恢复切换时的状态，继续执行。</li><li>状态相关：进程当前的状态，说明该进程处于什么状态</li><li>信号相关：进程的信号处理函数，以及记录当前进程是否还有待处理的信号</li><li>I&#x2F;O相关：记录进程与各种I&#x2F;O设备之间的交互</li></ul></li><li>每个进程的内核空间中都有PCB，但真正的PCB是存储在物理内存上的，当进程创建和销毁时，会由操作系统操作PCB，每个进程只是虚拟地址空间，并不会存储实际数据，数据存储在物理内存中，只有一份。</li></ul><h2 id="进程间同步"><a href="#进程间同步" class="headerlink" title="进程间同步"></a>进程间同步</h2><p>信号量</p><h2 id="forkvforkclone"><a href="#forkvforkclone" class="headerlink" title="forkvforkclone"></a><a href="https://blog.csdn.net/gogokongyin/article/details/51178257">forkvforkclone</a></h2><p>fork、v_fork、clone底层都是do_fork，追踪发现底层使用的是sys_clone</p><ul><li>fork<ul><li>父进程fork之后创建子进程，子进程复制父进程的所有资源，子进程的代码段、数据段、堆栈都是指向父进程的物理空间，但此时仅仅是子进程的虚拟地址空间和父进程指向的物理地址空间建立了映射关系，并没有真正复制</li><li>由于fork()后会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，处于效率考虑，linux中引入了“写时复制技术-Copy-On-Write”</li><li>若两个进程一直只是读数据，则子进程一直不会复制，直到任一进程进行写操作</li><li>父进程和子进程执行顺序没有规定，可以乱序执行</li><li>读时共享，写时复制</li></ul></li><li>vfork<ul><li>vfork也是创建一个子进程，但是子进程共享父进程的空间。在vfork创建子进程之后，父进程阻塞，直到子进程执行了exec()或者exit()。</li><li>规定必须子进程先执行</li><li>严格意义上讲，vfork产生的不叫进程，因为他没有独立的地址空间，和父进程共享同一个</li></ul></li></ul><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>进程间通信主要包括管道、系统IPC（包括消息队列、信号、共享内存等）、本地套接字socket。</p><ul><li>管道(缓冲区有限)<ul><li>无名管道PIPE<ul><li>一种半双工的通信方式，只能在具有亲缘关系的进程间使用（父子进程或兄弟进程）</li></ul></li><li>有名管道FIFO<ul><li>一种半双工的通信方式，可以在非亲缘关系的进程间使用</li></ul></li></ul></li><li>消息队列<ul><li>消息队列是消息的链接表，存放在内核中并由消息队列标识符标识</li><li>消息队列克服了信号传递信息少，管道缓冲区大小受限的缺点</li><li>一个消息队列由一个标识符（即队列ID）来标记</li></ul></li><li>信号<ul><li>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li></ul></li><li><a href="https://blog.csdn.net/hj605635529/article/details/73163513">共享内存</a><ul><li>它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。多个进程可以同时操作，所以需要进行同步 ，一般与信号量配合使用。    </li><li>shm</li><li>mmap</li></ul></li><li>套接字<ul><li>本地套接字用于本机不同进程间通信，另外普通套接字可以用于不同主机间的进程间通信</li></ul></li></ul><h2 id="共享内存底层原理"><a href="#共享内存底层原理" class="headerlink" title="共享内存底层原理"></a><a href="https://blog.csdn.net/joejames/article/details/37958017">共享内存底层原理</a></h2><p>共享内存有两个，一个mmap，一个systemV的shmget</p><ul><li>虚拟内存在硬盘上</li></ul><h3 id="不同进程如何访问共享内存？"><a href="#不同进程如何访问共享内存？" class="headerlink" title="不同进程如何访问共享内存？"></a>不同进程如何访问共享内存？</h3><h2 id="进程异常退出共享内存会销毁吗"><a href="#进程异常退出共享内存会销毁吗" class="headerlink" title="进程异常退出共享内存会销毁吗"></a><a href="https://blog.csdn.net/brucexu1978/article/details/7728717">进程异常退出共享内存会销毁吗</a></h2><h2 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h2><h3 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h3><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p><ul><li><p>先来先服务 first-come first-serverd（FCFS）</p><blockquote><ul><li>非抢占式的调度算法，按照请求的顺序进行调度。</li><li>有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。</li></ul></blockquote></li><li><p>短作业优先 shortest job first（SJF）</p><blockquote><ul><li>非抢占式的调度算法，按估计运行时间最短的顺序进行调度。</li><li>长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。</li></ul></blockquote></li><li><p>最短剩余时间优先 shortest remaining time next（SRTN）</p><blockquote><ul><li>最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 </li><li>当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。</li></ul></blockquote></li></ul><h3 id="交互式系统"><a href="#交互式系统" class="headerlink" title="交互式系统"></a>交互式系统</h3><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p><ul><li><p>时间片轮转</p><blockquote><ul><li>将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。</li><li>当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。</li></ul></blockquote></li><li><p>优先级调度</p><blockquote><ul><li>为每个进程分配一个优先级，按优先级进行调度。</li><li>为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</li></ul></blockquote></li><li><p>多级反馈队列</p><blockquote><ul><li>一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。</li><li>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。</li><li>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。</li><li>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</li></ul></blockquote></li></ul><h3 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h3><ul><li>实时系统要求一个请求在一个确定时间内得到响应。</li><li>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</li></ul><h2 id="进程调度时机"><a href="#进程调度时机" class="headerlink" title="进程调度时机"></a>进程调度时机</h2><blockquote><ul><li>进程状态转换的时刻：进程终止、进程睡眠；</li><li>当前进程的时间片用完时（current-&gt;counter&#x3D;0）；</li><li>设备驱动程序</li><li>进程从中断、异常及系统调用返回到用户态时；</li></ul></blockquote><h2 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h2><ul><li>当父进程先结束，子进程此时就会变成孤儿进程，孤儿进程会自动向上被init进程收养，init进程完成对状态收集工作。而且这种过继的方式也是守护进程能够实现的因素。</li><li>如果子进程先结束，父进程并未调用wait或者waitpid获取进程状态信息，回收进程资源，那么子进程描述符就会一直保存在系统中，这种进程称为僵尸进程。<ul><li>僵尸进程是每个子进程退出时必然经历的过程</li><li>僵尸进程的危害<ul><li>在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件，占用的内存等。但是仍然为其保留一定的信息（包括进程号the process ID，退出状态the termination status of the process，运行时间the amount of CPU time taken by the process等）。直到父进程通过wait &#x2F; waitpid来取时才释放. </li><li>如果进程不调用wait &#x2F; waitpid的话， 那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程。</li></ul></li><li>如何消除僵尸进程<ul><li>kill发送SIGTERM或者SIGKILL信号消灭产生僵尸进程的进程，它产生的僵死进程就变成了孤儿进程，这些孤儿进程会被init进程接管</li><li>子进程退出时向父进程发送SIGCHILD信号，父进程处理SIGCHILD信号。在信号处理函数中调用wait进行处理僵尸进程。</li></ul></li></ul></li></ul><h2 id="进程状态转移"><a href="#进程状态转移" class="headerlink" title="进程状态转移"></a>进程状态转移</h2><ul><li>就绪状态（ready）：等待被调度</li><li>运行状态（running）</li><li>阻塞状态（waiting）：等待资源<blockquote><ul><li>就绪状态的进程通过调度算法从而获得 CPU  时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。</li><li>阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。</li></ul></blockquote></li></ul><h2 id="进程间共享和私有资源"><a href="#进程间共享和私有资源" class="headerlink" title="进程间共享和私有资源"></a>进程间共享和私有资源</h2><ul><li>私有：地址空间、堆、全局变量、栈、寄存器（0-3G的用户空间）</li><li>共享：3-4G的内核空间</li></ul><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程是CPU调度的基本单位</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a><a href="https://blog.csdn.net/pinganting/article/details/53750142">协程</a></h2><p><a href="https://blog.csdn.net/somezz/article/details/81265198">协程学习笔记</a></p><h3 id="协程概述"><a href="#协程概述" class="headerlink" title="协程概述"></a>协程概述</h3><ul><li>协程是轻量级线程，拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。</li><li>协程能保留上一次调用时的状态，即所有局部状态的一个特定组合，每次过程重入时，就相当于进入上一次调用的状态。</li></ul><h3 id="协程和线程的区别"><a href="#协程和线程的区别" class="headerlink" title="协程和线程的区别"></a>协程和线程的区别</h3><ul><li>协程最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</li><li>不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>I&#x2F;O 密集型任务。</li></ul><blockquote><ul><li>这一点与多线程有些类似，但协程调用是在一个线程内进行的，是单线程，切换的开销小，因此效率上略高于多线程。</li><li>当程序在执行 I&#x2F;O 时操作时，CPU 是空闲的，此时可以充分利用 CPU 的时间片来处理其他任务。在单线程中，一个函数调用，一般是从函数的第一行代码开始执行，结束于 return 语句、异常或者函数执行（也可以认为是隐式地返回了 None ）。 </li><li>有了协程，我们在函数的执行过程中，如果遇到了耗时的 I&#x2F;O 操作，函数可以临时让出控制权，让 CPU 执行其他函数，等 I&#x2F;O 操作执行完毕以后再收回控制权。</li></ul></blockquote><h2 id="线程间同步及系统调用"><a href="#线程间同步及系统调用" class="headerlink" title="线程间同步及系统调用"></a>线程间同步及系统调用</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量是一种特殊的变量，可用于线程同步。它只取自然数值，并且只支持两种操作：</p><blockquote><ul><li>P(SV):如果信号量SV大于0，将它减一；如果SV值为0，则挂起该线程。</li><li>V(SV)：如果有其他进程因为等待SV而挂起，则唤醒，然后将SV+1；否则直接将SV+1。</li></ul></blockquote><ul><li>系统调用<ul><li>sem_wait（sem_t *sem）：以原子操作的方式将信号量减1，如果信号量值为0，则sem_wait将被阻塞，直到这个信号量具有非0值。</li><li>sem_post（sem_t *sem)：以原子操作将信号量值+1。当信号量大于0时，其他正在调用sem_wait等待信号量的线程将被唤醒。</li></ul></li></ul><h3 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h3><p>互斥量又称互斥锁，主要用于线程互斥，不能保证按序访问，可以和条件锁一起实现同步。当进入临界区      时，需要获得互斥锁并且加锁；当离开临界区时，需要对互斥锁解锁，以唤醒其他等待该互斥锁的线程。</p><ul><li>系统调用<ul><li>pthread_mutex_init:初始化互斥锁</li><li>pthread_mutex_destroy：销毁互斥锁</li><li>pthread_mutex_lock：以原子操作的方式给一个互斥锁加锁，如果目标互斥锁已经被上锁，pthread_mutex_lock调用将阻塞，直到该互斥锁的占有者将其解锁。</li><li>pthread_mutex_unlock:以一个原子操作的方式给一个互斥锁解锁。</li></ul></li></ul><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>条件变量，用于在线程之间同步共享数据的值。条件变量提供一种线程间通信机制：当某个共享数据达到某个值时，唤醒等待这个共享数据的一个&#x2F;多个线程。即，当某个共享变量等于某个值时，调用 signal&#x2F;broadcast。此时操作共享变量时需要加锁。</p><ul><li>系统调用<ul><li>pthread_cond_init:初始化条件变量</li><li>pthread_cond_destroy：销毁条件变量</li><li>pthread_cond_signal：唤醒一个等待目标条件变量的线程。哪个线程被唤醒取决于调度策略和优先级。</li><li>pthread_cond_wait：等待目标条件变量。需要一个加锁的互斥锁确保操作的原子性。该函数中在进入wait状态前首先进行解锁，然后接收到信号后会再加锁，保证该线程对共享资源正确访问。</li></ul></li></ul><h2 id="线程间共享和私有资源"><a href="#线程间共享和私有资源" class="headerlink" title="线程间共享和私有资源"></a><a href="https://www.cnblogs.com/Lxk0825/p/9559070.html">线程间共享和私有资源</a></h2><ul><li>私有：<strong>线程栈，寄存器，程序寄存器</strong>，线程ID，错误返回码，信号屏蔽字，调度优先级</li><li>共享：文件描述符表，堆，地址空间，全局变量，静态变量，进程代码段，进程的当前目录和进程用户ID与进程组ID</li></ul><h2 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h2><blockquote><ul><li>进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。</li><li>进程有独立的系统资源或地址空间，而同一进程内的线程共享进程的大部分系统资源,包括堆、代码段、数据段，每个线程只拥有一些在运行中必不可少的私有属性，比如线程Id,栈、寄存器、程序计数器PC(或者说IP)。</li><li>一个进程崩溃，不会对其他进程产生影响；而一个线程崩溃，会让同一进程内的其他线程也宕掉。</li><li>进程在创建、销毁时开销比较大，而线程比较小。进程创建的时候需要分配虚拟地址空间等系统资源，而销毁的的时候需要释放系统资源；线程只需要创建栈，栈指针，程序计数器，通用目的寄存器和条件码等，不需要创建独立的虚拟地址空间。</li><li>进程切换开销比较打，线程比较小。进程切换需要分两步：切换页目录、刷新TLB以使用新的地址空间；切换内核栈和硬件上下文（寄存器）；而同一进程的线程间逻辑地址空间是一样的，不需要切换页目录、刷新TLB。</li><li>进程间通信比较复杂，而同一进程的线程由于共享代码段和数据段，所以通信比较容易。</li></ul></blockquote><h3 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a><a href="https://www.cnblogs.com/linhaostudy/p/7771437.html">TLB</a></h3><p>TLB( Translation Look- aside buffer)专门用于缓存内存中的页表项,一般在MMU单元内部，页表一般存储在屋里内存中。当处理器要访问一个虚拟地址时,首先会在TLB中查询。如果TLB表项中没有相应的表项,称为TLB Miss,那么就需要访问页表来计算出相应的物理地址。如果TLB表项中有相应的表项,那么直接从TLB表项中获取物理地址,称为TLB命中。 </p><h3 id="程序计数器PC和指令指针寄存器IP-http-blog-sina-com-cn-s-blog-5ede281a0100sn4w-html"><a href="#程序计数器PC和指令指针寄存器IP-http-blog-sina-com-cn-s-blog-5ede281a0100sn4w-html" class="headerlink" title="程序计数器PC和指令指针寄存器IP(http://blog.sina.com.cn/s/blog_5ede281a0100sn4w.html)"></a>程序计数器PC和指令指针寄存器IP(<a href="http://blog.sina.com.cn/s/blog_5ede281a0100sn4w.html">http://blog.sina.com.cn/s/blog_5ede281a0100sn4w.html</a>)</h3><ul><li>程序计数器PC<ul><li>用指令事先编好的程序连续存放在内存程序区中，靠地址+1的方法连续取指执行”。在八位机8080CPU中是采用先取指后执行的串行操作的原理，而其中执行地址+1指令寻址的部件就是程序计数器PC。那么在程序的执行过程中，PC始终是指向下一条要执行的指令。</li><li>结论：PC中的地址就是需要转移、循环、调用子程序和中断子程序等操作时的断点。</li></ul></li><li>指令指针寄存器IP<ul><li>在向上兼容的十六位机8086CPU中首先分为两个功能部件，即总线接口部件BIU和执行部件EU，BIU负责取指令，EU负责译码执行。并且当BIU执行指令排队栈中的六个字节装满后，（8088CPU是4个字节），EU开始从指令排队栈的出栈口，取指令进行译码执行，同时BIU并行操作向入栈口补充一条取指令命令。</li><li>指令指针IP则是指向下个条要取指的指令，而不是EU要执行的指令。而断点则应该是要执行的指令内存地址，而不是IP内的下一条要取指的指令地址。</li></ul></li><li>PC是模型机中的概念，IP是实际使用的，调试时我们发现，IP实现的就是PC的功能。</li></ul><h3 id="为什么有了进程还需要线程？"><a href="#为什么有了进程还需要线程？" class="headerlink" title="为什么有了进程还需要线程？"></a>为什么有了进程还需要线程？</h3><ul><li>优点<ul><li>进程可以使多个程序能并发执行，以提高资源的利用率和系统的吞吐量.</li></ul></li><li>缺点<ul><li>进程在同一时间只能干一件事</li><li>进程在执行的过程中如果阻塞，整个进程就会挂起，即使进程中有些工作不依赖于等待的资源，仍然不会执行。</li></ul></li></ul><p>因此，操作系统引入了比进程粒度更小的线程，作为并发执行的基本单位，从而减少程序在并发执行时所付出的时空开销，提高并发性</p><h2 id="用户态和内核态"><a href="#用户态和内核态" class="headerlink" title="用户态和内核态"></a>用户态和内核态</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><blockquote><ul><li>用户态和内核态是操作系统的两种运行级别，两者最大的区别就是特权级不同。</li><li>用户态拥有最低的特权级，内核态拥有较高的特权级。</li><li>运行在用户态的程序不能直接访问操作系统内核数据结构和程序</li><li>操作系统的数据都是存放于系统空间的，用户进程的数据是存放于用户空间的。<ul><li>分开来存放，就让系统的数据和用户的数据互不干扰，保证系统的稳定性。</li><li>分开存放，管理上很方便，而更重要的是，将用户的数据和系统的数据隔离开，就可以对两部分的数据的访问进行控制。这样就可以确保用户程序不能随便操作系统的数据，这样防止用户程序误操作或者是恶意破坏系统。</li></ul></li></ul></blockquote><h3 id="用户态和内核态可以通过指针传递数据吗？"><a href="#用户态和内核态可以通过指针传递数据吗？" class="headerlink" title="用户态和内核态可以通过指针传递数据吗？"></a><a href="http://blog.chinaunix.net/uid-26611973-id-3190018.html">用户态和内核态可以通过指针传递数据吗？</a></h3><ul><li>用户态不能访问内核态的指针<ul><li>为了实现内存的保护，防止越界访问而造成受保护内存的被非法修改，甚至造成系统的崩溃，这种直接传递数据指针来传递数据的方式是被禁止的。</li></ul></li><li>内核态可以访问用户态的指针(有前提)<ul><li>必须保证用户态虚拟空间的指针（虚拟空间的地址），已经分配物理地址，否则指针传入内核态中将不会引发缺页异常而报错</li></ul></li><li><a href="https://blog.csdn.net/u014089131/article/details/56272892">内核中访问用户进程的地址的时候用copy_from_user，而不是用memcpy直接拷贝(或者说使用用户态指针)</a><ul><li>copy_from_user主要是这个函数提供了两个功能<ul><li>对用户进程传过来的地址范围进行合法性检查；</li><li>当用户传来的地址没有分配物理地址时，定义了缺页处理后的异常发生地址，保证程序顺利执行； </li><li>对于用户进程访问虚拟地址，如果还未分配物理地址，就会触发内核缺页异常，接着内核会负责分配物理地址，并修改映射页表。这个过程对于用户进程是完全透明的。但是在内核空间发生缺页时，必须显式处理，否则会导致内核出现错误</li></ul></li><li>直接使用memcpy时为什么没有出现异常<ul><li>只有用户传来的地址空间没有分配对应的物理地址时才会进行修复，如果用户进程之前已经使用过这段空间，代表已经分配了物理地址，自然不会发生缺页异常。</li></ul></li></ul></li></ul><h3 id="两种状态转换"><a href="#两种状态转换" class="headerlink" title="两种状态转换"></a>两种状态转换</h3><ul><li>系统调用<ul><li>用户进程主动要求切换到内核态的一种方式，用户进程通过系统调用申请操作系统提供的服务程序完成工作</li></ul></li><li>异常<ul><li>当CPU在执行运行在用户态的程序时，发现了某些事件不可知的异常，这是会触发由当前运行进程切换到处理此异常的内核相关程序中，也就到了内核态，比如缺页异常。</li></ul></li><li>外围设备中断<ul><li>当外围设备完成用户请求的操作之后，会向CPU发出相应的中断信号，这时CPU会暂停执行下一条将要执行的指令，转而去执行中断信号的处理程序 </li><li>比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等</li></ul></li></ul><h2 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h2><h3 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h3><p>本地磁盘 -&gt; 主存(DRAM) -&gt; L3高速缓存(SRAM) -&gt; L2高速缓存(SRAM) -&gt; L1高速缓存(SRAM) -&gt; L0寄存器</p><h3 id="缓存思想"><a href="#缓存思想" class="headerlink" title="缓存思想"></a>缓存思想</h3><blockquote><ul><li>位于K层的更快更小的存储设备作为位于K+1层更大更慢的存储设备的缓存</li><li>K+1层的存储器被划分成连续的数据对象组块，称为块，数据总是以块大小为传送单元在K和K+1层之间来回复制</li></ul></blockquote><h3 id="缓存命中"><a href="#缓存命中" class="headerlink" title="缓存命中"></a>缓存命中</h3><blockquote><ul><li>当程序需要K+1层的某个数据对象d时，首先在当前存储在K层的块中查找d，若d刚好缓存在k层中，则称为缓存命中</li><li>若缓存不命中，则需要将K+1层中包含对象d的块缓存到K层中，若K层中满了，则需要替换现存的一个块</li></ul></blockquote><h2 id="什么是虚拟内存"><a href="#什么是虚拟内存" class="headerlink" title="什么是虚拟内存"></a>什么是虚拟内存</h2><p>为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存，防止不同进程同一时刻在物理内存中运行而对物理内存的争夺和践踏，采用了虚拟内存。</p><p>为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但<strong>不需要映射到连续的物理内存</strong>，也<strong>不需要所有页都必须在物理内存中</strong>。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。</p><p>虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。</p><h3 id="虚拟内存的好处"><a href="#虚拟内存的好处" class="headerlink" title="虚拟内存的好处"></a><a href="https://www.jianshu.com/p/baf3a13c47db">虚拟内存的好处</a></h3><ul><li>可以更加高效的使用物理内存<ul><li>虚拟地址空间一开始并没有真正的对应物理地址，而是在真正使用的时候才去对应。</li><li>通过虚拟内存置换算法在访问后边的地址空间的时候就可以将前边当前没有在访问的物理页释放掉，或者交换到硬盘中。这样这个物理页又可以去对应新的虚拟地址。从而使物理内存可以充分的利用。</li></ul></li><li>内存管理<ul><li>为每个进程提供了一致的地址空间，简化内存管理</li></ul></li><li>内存保护<ul><li>在使用虚拟地址的时候，暴露给程序员永远都是虚拟地址，而具体的物理地址在哪里，这个只有系统才了解。这样就提高了系统的封装性。</li><li>保护了每个进程的地址空间不被其他进程破坏</li></ul></li></ul><h2 id="虚拟内存页表寻址"><a href="#虚拟内存页表寻址" class="headerlink" title="虚拟内存页表寻址"></a>虚拟内存页表寻址</h2><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>虚拟内存分割成虚拟页，物理内存被分割成物理页，用来作为磁盘和主存的传输单元。<br>虚拟页分为三个不相交的子集</p><blockquote><ul><li>未分配的，不占磁盘空间</li><li>缓存的，当前已缓存在物理内存中的已分配页，在页表中标志位为1</li><li>未缓存的，未缓存在物理内存中的已分配页，在页表中标志位为0</li></ul></blockquote><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>内存管理单元（MMU，属于硬件）管理着地址空间和物理内存的转换，操作系统为每一个进程维护了一个从虚拟地址到物理地址的映射关系的数据结构，叫页表，存储着程序地址空间到物理内存空间的映射表。</p><p>页表存放在物理内存中，物理页存放在物理内存中，虚拟页存放在磁盘上</p><h3 id="页表寻址"><a href="#页表寻址" class="headerlink" title="页表寻址"></a>页表寻址</h3><blockquote><ul><li>一个虚拟地址分为两部分，一部分存储页面号，一部分存储偏移量</li><li>页表分为序号、页基地址、标志位</li><li>访问虚拟地址，先通过页表查询页面号，查看标志位确认虚拟地址是否在物理内存中有缓存，然后由逻辑地址的高位部分先找到逻辑地址对应的页基地址，再由页基地址偏移虚拟地址中的偏移量就得到最后的物理地址</li><li>一般情况下，这个过程都可以由硬件完成，所以效率还是比较高的。页式内存管理的优点就是比较灵活，内存管理以较小的页为单位，方便内存换入换出和扩充地址空间。</li></ul></blockquote><h2 id="缺页中断"><a href="#缺页中断" class="headerlink" title="缺页中断"></a>缺页中断</h2><p>在请求分页系统中，可以通过查询页表中的状态位来确定所要访问的页面是否存在于内存中。每当所要访问的页面不在内存时(缓存不命中)，会产生一次缺页中断，此时操作系统会根据页表中的外存地址在外存中找到所缺的一页，将其调入内存。</p><p>缺页本身是一种中断，与一般的中断一样，需要经过4个处理步骤：</p><blockquote><ul><li>保护CPU现场</li><li>分析中断原因</li><li>转入缺页中断处理程序进行处理</li><li>恢复CPU现场，继续执行</li></ul></blockquote><p>但是缺页中断是由于所要访问的页面不存在于内存时，由硬件所产生的一种特殊的中断，因此，与一般的中断存在区别：</p><blockquote><ul><li>在指令执行期间产生和处理缺页中断信号</li><li>一条指令在执行期间，可能产生多次缺页中断</li><li>缺页中断返回是，执行产生中断的一条指令，而一般的中断返回是，执行下一条指令。</li></ul></blockquote><h2 id="虚拟内存置换算法"><a href="#虚拟内存置换算法" class="headerlink" title="虚拟内存置换算法"></a>虚拟内存置换算法</h2><p>当访问一个内存中不存在的页，并且内存已满，则需要从内存中调出一个页或将数据送至磁盘对换区，替换一个页，这种现象叫做缺页置换。</p><p>当前操作系统最常采用的缺页置换算法如下：</p><blockquote><ul><li>先进先出(FIFO)算法：置换最先调入内存的页面，即置换在内存中驻留时间最久的页面。按照进入内存的先后次序排列成队列，从队尾进入，从队首删除。</li></ul></blockquote><blockquote><ul><li>最近最少使用（LRU）算法: 置换最近一段时间以来最长时间未访问过的页面。根据程序局部性原理，刚被访问的页面，可能马上又要被访问；而较长时间内没有被访问的页面，可能最近不会被访问。</li></ul></blockquote><p>当前最常采用的就是LRU算法。 </p><h2 id="说一下LINUX系统中的锁"><a href="#说一下LINUX系统中的锁" class="headerlink" title="说一下LINUX系统中的锁"></a>说一下LINUX系统中的锁</h2><p>互斥锁，读写锁，自旋锁</p><blockquote><ul><li>互斥锁：mutex，用于保证在任何时刻，都只能有一个线程访问该对象。<strong>当获取锁操作失败时，线程会进入睡眠</strong>，等待锁释放时被唤醒</li></ul></blockquote><blockquote><ul><li>读写锁：rwlock，分为读锁和写锁。处于读操作时，可以允许多个线程同时获得读操作。但是同一时刻只能有一个线程可以获得写锁。其它<strong>获取写锁失败的线程都会进入睡眠状态</strong>，直到写锁释放时被唤醒。 注意：写锁会阻塞其它读写锁。当有一个线程获得写锁在写时，读锁也不能被其它线程获取；写者优先于读者（一旦有写者，则后续读者必须等待，唤醒时优先考虑写者）。适用于读取数据的频率远远大于写数据的频率的场合。</li></ul></blockquote><blockquote><ul><li>自旋锁：spinlock，在任何时刻同样只能有一个线程访问对象。但是<strong>当获取锁操作失败时，不会进入睡眠，而是会在原地自旋</strong>，循环检测锁的保持者是否释放，直到锁被释放。这样节省了线程从睡眠状态到被唤醒期间的消耗，在加锁时间短暂的环境下会极大的提高效率。但如果加锁时间过长，则会非常浪费CPU资源。</li></ul></blockquote><h2 id="自旋锁发生死锁"><a href="#自旋锁发生死锁" class="headerlink" title="自旋锁发生死锁"></a>自旋锁发生死锁</h2><h2 id="死锁产生的条件"><a href="#死锁产生的条件" class="headerlink" title="死锁产生的条件"></a>死锁产生的条件</h2><p>多个并发进程因争夺系统资源而产生相互等待的现象。</p><ul><li><p>互斥条件：进程对所分配到的资源不允许其他进程访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源；</p></li><li><p>请求和保持条件：进程获得一定的资源后，又对其他资源发出请求，但是该资源可能被其他进程占有，此时请求阻塞，但该进程不会释放自己已经占有的资源</p></li><li><p>不可剥夺条件：进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用后自己释放</p></li><li><p>环路等待条件：进程发生死锁后，必然存在一个进程-资源之间的环形链 ，环路中每个进程都在等待下一个进程所占有的资源</p></li></ul><h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><ul><li><strong>破坏请求和等待条件。</strong> 所有的进程在开始运行之前，必须一次性地申请其在整个运行过程中所需要的全部资源</li><li><strong>破坏不可抢占条件。</strong> 当进程新的资源未得到满足时，释放已占有的资源</li><li><strong>破坏环路等待条件。</strong> 系统给每类资源赋予一个序号，每个进程按编号递增的请求资源，释放则相反</li></ul><h2 id="死锁检测和死锁恢复"><a href="#死锁检测和死锁恢复" class="headerlink" title="死锁检测和死锁恢复"></a>死锁检测和死锁恢复</h2><ul><li>死锁检测<ul><li>每种类型一个资源的死锁检测</li><li>每种类型多个资源的死锁检测</li></ul></li><li>死锁恢复<ul><li><strong>抢占恢复。</strong> 从一个或多个进程中抢占足够数量的资源分配给死锁进程，以解除死锁状态</li><li><strong>回滚恢复。</strong> 周期性地检查进程的状态（包括请求的资源），将其写入一个文件，当发生死锁，回滚到之前的某个时间点</li><li><strong>杀死进程恢复。</strong> 终止或撤销系统中的一个或多个死锁进程，直至打破死锁状态。</li></ul></li></ul><h2 id="信号处理机制"><a href="#信号处理机制" class="headerlink" title="信号处理机制"></a><a href="http://www.360doc.com/content/16/0804/10/30953065_580685165.shtml">信号处理机制</a></h2><h2 id="哪两个信号不能忽略"><a href="#哪两个信号不能忽略" class="headerlink" title="哪两个信号不能忽略"></a><a href="https://www.cnblogs.com/Lynn-Zhang/p/5677118.html">哪两个信号不能忽略</a></h2><p>SIGKILL和SIGSTOP，这两种信号不能被忽略</p><ul><li>它们向超级用户提供一种使进程终止或停止的可靠方法。</li><li>如果忽略某些由硬件异常产生的信号（例如非法存储访问或除以0），则进程的行为是示定义的。</li></ul><h2 id="原子操作和锁机制"><a href="#原子操作和锁机制" class="headerlink" title="原子操作和锁机制"></a><a href="https://blog.csdn.net/CringKong/article/details/79966161">原子操作和锁机制</a></h2><p><a href="https://blog.csdn.net/c472769019/article/details/82663148">原子操作实现同步</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>计算机基础</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
